anilist <- read_html(url)
titles <- anilist %>%
html_nodes(".cover__data a") %>%
html_text()
scores <- anilist %>%
html_nodes("div[title='Average Score']") %>%
html_text()
scores <- as.numeric(gsub('%', '', scores)) / 10
votes <- anilist %>%
html_nodes("div[title='Popularity']") %>%
html_text()
votes <- as.numeric(votes)
output <- data.frame(cbind(scores, titles, noOfVotes))
colnames(output) <- c("Score", "Title", "Voters")
output #return
}
getIMDBAnime <- function(){
library(rvest)
hasMore <- TRUE
allPageResults <- data.frame()
pageNo <- 1
while(hasMore == TRUE){
url <- paste("http://www.imdb.com/search/keyword?keywords=anime&sort=user_rating,desc&mode=detail&page=", pageNo, "&title_type=tvSeries&ref_=kw_ref_key", sep = "")
animePage <- read_html(url)
print(paste("Loading records",  (pageNo - 1) * 50, "to", (pageNo - 1) * 50  + 50))
pageResult <- data.frame()
titles <- animePage %>%
html_nodes("div.lister-item-content > h3 > a") %>%
html_text(trim = TRUE)
ratings <- animePage %>%
html_nodes("div.lister-item-content > div > div.inline-block.ratings-imdb-rating > strong") %>%
html_text(trim = TRUE)
ratings <- as.numeric(ratings)
votes <- animePage %>%
html_nodes("div.lister-item-content > p:nth-child(6) > span:nth-child(2)") %>%
html_text(trim = TRUE)
votes <- as.numeric(gsub(',', '', votes))
if(length(titles) != length(ratings)) {
length(ratings) <- max(length(titles))
length(votes) <- max(length(titles))
}
pageResult <- data.frame(titles, ratings, votes)
allPageResults <- rbind(allPageResults, pageResult)
if(nrow(pageResult) < 50) {
hasMore <- FALSE
} else {
pageNo <- pageNo + 1
}
}
names(allPageResults) <- c("title", "rating", "votes")
data.frame(allPageResults)
}
mallist <- function(){
library(rvest)
hasMore <- TRUE
allPageResults <- data.frame()
urlLimit <- 12000
while(hasMore == TRUE){
url <- paste("https://myanimelist.net/topanime.php?limit=", urlLimit, sep = "")
animePage <- read_html(url)
print(paste("Loading records",  urlLimit, "to", urlLimit + 50))
titles <- animePage %>% html_nodes(xpath = '//*[contains(@class, "hoverinfo_trigger fl-l fs14 fw-b")]') %>% html_text(trim = TRUE)
ratings <- animePage %>% html_nodes(xpath = '//*[contains(@class, "js-top-ranking-score-col di-ib al")]') %>% html_text(trim = TRUE)
ratings <- as.numeric(ratings)
votes <- animePage %>% html_nodes(xpath = '//*[contains(@class, "information di-ib mt4")]/text()[preceding-sibling::br[2]]') %>% html_text(trim = TRUE)
for(i in 1:length(votes)) {
votes[i] <- substring(votes[i], 0, nchar(votes[i]) - 8)
}
votes <- as.numeric(gsub(',', '', votes))
pageResult <- data.frame(titles, ratings, votes)
allPageResults <- rbind(allPageResults, pageResult)
if(nrow(pageResult) < 50) {
hasMore <- FALSE
}
urlLimit <- urlLimit + 50
}
data.frame(allPageResults)
}
getMALAnime <- function(){
library(rvest)
hasMore <- TRUE
allPageResults <- data.frame()
urlLimit <- 12000
while(hasMore == TRUE){
url <- paste("https://myanimelist.net/topanime.php?limit=", urlLimit, sep = "")
animePage <- read_html(url)
print(paste("Loading records",  urlLimit, "to", urlLimit + 50))
titles <- animePage %>% html_nodes(xpath = '//*[contains(@class, "hoverinfo_trigger fl-l fs14 fw-b")]') %>% html_text(trim = TRUE)
ratings <- animePage %>% html_nodes(xpath = '//*[contains(@class, "js-top-ranking-score-col di-ib al")]') %>% html_text(trim = TRUE)
ratings <- as.numeric(ratings)
votes <- animePage %>% html_nodes(xpath = '//*[contains(@class, "information di-ib mt4")]/text()[preceding-sibling::br[2]]') %>% html_text(trim = TRUE)
for(i in 1:length(votes)) {
votes[i] <- substring(votes[i], 0, nchar(votes[i]) - 8)
}
votes <- as.numeric(gsub(',', '', votes))
pageResult <- data.frame(titles, ratings, votes)
allPageResults <- rbind(allPageResults, pageResult)
if(nrow(pageResult) < 50) {
hasMore <- FALSE
}
urlLimit <- urlLimit + 50
}
data.frame(allPageResults)
}
rm(mallist)
ALAnime <- getALAnime()
getALAnime <- function() {
library(rvest)
url <- "C:/Users/Roald/Documents/RData/IMDB/anilist/anilist.html"
anilist <- read_html(url)
titles <- anilist %>%
html_nodes(".cover__data a") %>%
html_text()
scores <- anilist %>%
html_nodes("div[title='Average Score']") %>%
html_text()
scores <- as.numeric(gsub('%', '', scores)) / 10
votes <- anilist %>%
html_nodes("div[title='Popularity']") %>%
html_text()
votes <- as.numeric(votes)
output <- data.frame(cbind(scores, titles, votes))
colnames(output) <- c("Score", "Title", "Voters")
output #return
}
ALAnime <- getALAnime()
getALAnime <- function() {
library(rvest)
url <- "C:/Users/Roald/Documents/RData/IMDB/anilist/anilist.html"
anilist <- read_html(url)
titles <- anilist %>%
html_nodes(".cover__data a") %>%
html_text()
ratings <- anilist %>%
html_nodes("div[title='Average Score']") %>%
html_text()
ratings <- as.numeric(gsub('%', '', ratings)) / 10
votes <- anilist %>%
html_nodes("div[title='Popularity']") %>%
html_text()
votes <- as.numeric(votes)
output <- data.frame(cbind(titles, ratings, votes))
colnames(output) <- c("title", "rating", "votes")
output #return
}
ALAnime <- getALAnime()
getMALAnime <- function(){
library(rvest)
hasMore <- TRUE
allPageResults <- data.frame()
urlLimit <- 0
while(hasMore == TRUE){
url <- paste("https://myanimelist.net/topanime.php?limit=", urlLimit, sep = "")
animePage <- read_html(url)
print(paste("Loading records",  urlLimit, "to", urlLimit + 50))
titles <- animePage %>% html_nodes(xpath = '//*[contains(@class, "hoverinfo_trigger fl-l fs14 fw-b")]') %>% html_text(trim = TRUE)
ratings <- animePage %>% html_nodes(xpath = '//*[contains(@class, "js-top-ranking-score-col di-ib al")]') %>% html_text(trim = TRUE)
ratings <- as.numeric(ratings)
votes <- animePage %>% html_nodes(xpath = '//*[contains(@class, "information di-ib mt4")]/text()[preceding-sibling::br[2]]') %>% html_text(trim = TRUE)
for(i in 1:length(votes)) {
votes[i] <- substring(votes[i], 0, nchar(votes[i]) - 8)
}
votes <- as.numeric(gsub(',', '', votes))
pageResult <- data.frame(titles, ratings, votes)
allPageResults <- rbind(allPageResults, pageResult)
if(nrow(pageResult) < 50) {
hasMore <- FALSE
}
urlLimit <- urlLimit + 50
}
data.frame(allPageResults)
}
ALAnimeDF <- getALAnime()
rm(ALAnime)
MALAnimeDF <- getMALAnime()
MALAnimeDF <- getMALAnime()
View(MALAnimeDF)
IMDBAnimeDF <- getIMDBAnime()
View(IMDBAnimeDF)
View(ALAnimeDF)
refineDF <- function(df) {
library(dplyr)
df %>% filter(rating > 0, votes >= 50, !is.na(votes))
}
refineDF(IMDBAnimeDF) -> IMDBAnimeDFRefined
View(IMDBAnimeDFRefined)
MALAnimeDF %>% filter(title = "Kapeta")
MALAnimeDF %>% filter(title == "Kapeta")
MALAnimeDF %>% filter(titles == "Kapeta")
MALAnimeDF %>% filter(title == "Shin taketori monogatari: 1000-nen joô")
MALAnimeDF %>% filter(titles == "Shin taketori monogatari: 1000-nen joô")
MALAnimeDF %>% filter(titles == "Naruto")
MALAnimeDF %>% filter(grepl("Kapeta", titles, FIXED = TRUE))
MALAnimeDF %>% filter(grepl("Kapeta", titles, fixed = TRUE))
MALAnimeDF %>% filter(grepl("Kapeta", titles))
refineDF <- function(df) {
library(dplyr)
df %>% filter(rating > 0, votes >= 100, !is.na(votes))
}
refineDF(IMDBAnimeDF) -> IMDBAnimeDFRefined
View(IMDBAnimeDFRefined)
MALAnimeDF %>% filter(grepl("Ginga eiyû densetsu", titles))
MALAnimeDF %>% filter(grepl("Ginga", titles))
MALAnimeDF %>% filter(grepl("eiyû densetsu", titles))
MALAnimeDF %>% filter(grepl("Ginga eiyû", titles))
MALAnimeDF %>% filter(grepl("Ginga", titles))
colnames(MALAnimeDF) <- c("title", "rating", "votes")
refineDF <- function(df) {
library(dplyr)
df %>%
filter(rating > 0, votes >= 100, !is.na(votes), !is.na(rating)) %>%
arrange(desc(rating)) %>%
mutate("id" = 1:n())
}
refineDF(IMDBAnimeDF) -> IMDBAnimeDFRefined
View(IMDBAnimeDFRefined)
refineDF <- function(df) {
library(dplyr)
df %>%
filter(rating > 0, votes >= 100, !is.na(votes), !is.na(rating)) %>%
arrange(desc(rating)) %>%
mutate("rank" = 1:n())
}
View(IMDBAnimeDFRefined)
refineDF(IMDBAnimeDF) -> IMDBAnimeDFRefined
View(IMDBAnimeDFRefined)
refineDF <- function(df) {
library(dplyr)
df %>%
filter(rating > 0, votes >= 100, !is.na(votes), !is.na(rating)) %>%
arrange(desc(rating)) %>%
mutate("ranking" = 1:n())
}
refineDF(IMDBAnimeDF) -> IMDBAnimeDFRefined
View(IMDBAnimeDFRefined)
ALAnimeDFRefined <- refineDF(ALAnimeDF)
getALAnime <- function() {
library(rvest)
url <- "C:/Users/Roald/Documents/RData/IMDB/anilist/anilist.html"
anilist <- read_html(url)
titles <- anilist %>%
html_nodes(".cover__data a") %>%
html_text()
ratings <- anilist %>%
html_nodes("div[title='Average Score']") %>%
html_text()
ratings <- as.numeric(gsub('%', '', ratings)) / 10
votes <- anilist %>%
html_nodes("div[title='Popularity']") %>%
html_text()
votes <- as.numeric(votes)
output <- data.frame(cbind(titles, ratings, votes))
colnames(output) <- c("title", "rating", "votes")
output #return
}
ALAnimeDF <- getALAnime()
library(rvest)
url <- "C:/Users/Roald/Documents/RData/IMDB/anilist/anilist.html"
anilist <- read_html(url)
titles <- anilist %>%
html_nodes(".cover__data a") %>%
html_text()
ratings <- anilist %>%
html_nodes("div[title='Average Score']") %>%
html_text()
ratings <- as.numeric(gsub('%', '', ratings)) / 10
votes <- anilist %>%
html_nodes("div[title='Popularity']") %>%
html_text()
votes <- as.numeric(votes)
output <- data.frame(cbind(titles, ratings, votes))
getALAnime <- function() {
library(rvest)
url <- "C:/Users/Roald/Documents/RData/IMDB/anilist/anilist.html"
anilist <- read_html(url)
titles <- anilist %>%
html_nodes(".cover__data a") %>%
html_text()
ratings <- anilist %>%
html_nodes("div[title='Average Score']") %>%
html_text()
ratings <- as.numeric(gsub('%', '', ratings)) / 10
votes <- anilist %>%
html_nodes("div[title='Popularity']") %>%
html_text()
votes <- as.numeric(votes)
output <- data.frame(titles, ratings, votes)
colnames(output) <- c("title", "rating", "votes")
output #return
}
ALAnimeDF <- getALAnime()
rm(output, anilist, ratings, titles, url)
rm(votes)
refineDF(ALAnimeDF) -> ALAnimeDFRefined
View(ALAnimeDFRefined)
refineDF <- function(df) {
library(dplyr)
df %>%
filter(rating > 0, votes >= 500, !is.na(votes), !is.na(rating)) %>%
arrange(desc(rating)) %>%
mutate("ranking" = 1:n())
}
MALAnimeDFRefined <- getMALAnime()
MALAnimeDFRefined <- refineDF(MALAnimeDF)
View(MALAnimeDFRefined)
refineDF(IMDBAnimeDF) -> IMDBAnimeDFRefined
View(IMDBAnimeDFRefined)
refineDF(ALAnimeDF) -> ALAnimeDFRefined
View(ALAnimeDFRefined)
View(IMDBAnimeDF)
refineDF <- function(df) {
library(dplyr)
df %>%
filter(rating > 0, votes >= 250, !is.na(votes), !is.na(rating)) %>%
arrange(desc(rating)) %>%
mutate("ranking" = 1:n())
}
refineDF <- function(df) {
library(dplyr)
df %>%
filter(rating > 0, votes >= 250, !is.na(votes), !is.na(rating)) %>%
arrange(desc(rating)) %>%
mutate("ranking" = 1:n())
}
ALAnimeDFRefined <- refineDF(ALAnimeDF)
MALAnimeDFRefined <- refineDF(MALAnimeDF)
IMDBAnimeDFRefined <- refineDF(IMDBAnimeDF)
View(MALAnimeDFRefined)
mean(ALAnimeDFRefined %>% select(ranking) %>% filter(ranking <= 100))
mean(ALAnimeDFRefined %>% select ranking  %>% filter(ranking <= 100))
mean(ALAnimeDFRefined %>% select(ranking))
ALAnimeDFRefined %>% select(ranking)
mean(ALAnimeDFRefined %>% select ranking  %>% filter(rating <= 100))
mean(ALAnimeDFRefined %>% select(rating)  %>% filter(ranking <= 100))
mean(ALAnimeDFRefined %>% select(rating) %>% filter(ranking <= 100))
ALAnimeDFRefined$ranking
mean(ALAnimeDFRefined %>%select(rating) %>% filter(ranking <= 100))
mean(ALAnimeDFRefined %>% select(rating, ranking) %>% filter(ranking <= 100))
top100Mean <- function(df) {
tList <- df %>% filter(ranking <= 100)
mean(tList$rating)
}
top100Mean(ALAnimeDFRefined)
top100Mean(MALAnimeDFRefined)
top100Mean(IMDBAnimeDFRefined)
refineDF <- function(df) {
library(dplyr)
df %>%
filter(rating > 0, votes >= 500, !is.na(votes), !is.na(rating)) %>%
arrange(desc(rating)) %>%
mutate("ranking" = 1:n())
}
ALAnimeDFRefined <- refineDF(ALAnimeDF)
MALAnimeDFRefined <- refineDF(MALAnimeDF)
IMDBAnimeDFRefined <- refineDF(IMDBAnimeDF)
top100Mean(ALAnimeDFRefined)
top100Mean(MALAnimeDFRefined)
top100Mean(IMDBAnimeDFRefined)
top100RatingMean <- function(df) {
tList <- df %>% filter(ranking <= 100)
mean(tList$rating)
}
top100Mean <- function(df, column) {
tList <- df %>% filter(ranking <= 100)
mean(tList$column)
}
top100Mean(IMDBAnimeDFRefined, voters)
top100Mean(IMDBAnimeDFRefined, votes)
top100VotesMean <- function(df) {
tList <- df %>% filter(ranking <= 100)
mean(tList$votes)
}
top100VotesMean(IMDBAnimeDFRefined)
rm(top100Mean())
rm(top100Mean
)
top100VotesMean(MALAnimeDFRefined)
top100VotesMean(ALAnimeDFRefined)
View(getMALAnime)
MALAnimeDF <- getMALAnime()
top100RatingMean(ALAnimeDFRefined)
top100RatingMean(IMDBAnimeDFRefined)
View(ALAnimeDFRefined)
top100RatingMean(ALAnimeDFRefined)
top100RatingMean(MALAnimeDFRefined)
View(MALAnimeDFRefined)
top100VotesMean(MALAnimeDFRefined)
IMDBAnimeDFRefined$ranking
library(dplyr)
top100VotesMean(MALAnimeDFRefined)
top100RatingMean(MALAnimeDFRefined)
top100RatingMean(IMDBAnimeDFRefined)
top100RatingMean(ALAnimeDFRefined)
View(ALAnimeDF)
View(IMDBAnimeDF)
top100RatingMean(IMDBAnimeDF)
top100RatingMean <- function(df) {
library(dplyr)
tList <- df %>% filter(ranking <= 100)
mean(tList$rating)
}
top100VotesMean <- function(df) {
library(dplyr)
tList <- df %>% filter(ranking <= 100)
mean(tList$votes)
}
top100RatingMean(IMDBAnimeDF)
View(ALAnimeDF)
View(IMDBAnimeDF)
rm(list = ls())
View(refineDF)
View(top100RatingMean)
View(getMALAnime)
ALAnimeDF %>% filter(title)
library(rvest)
ALAnimeDF %>% filter(title)
ALAnimeDF %>% filter(rating < 9)
View(ALAnimeDF)
ALAnimeDF %>% filter(rating < 9)
ALAnimeDF %>% filter(votes < 900)
ALAnimeDF %>% select(100)
library(dplyr)
ALAnimeDF %>% filter(votes < 900)
read_html("https://ssssssssssssssssssssssssssssssssssssssssssdesdsdfasdfgafg2.7com")
mean(ALAnimeDF$rating)
mean(MALAnimeDF$rating)
mean(MALAnimeDF$ratings)
view
View(ALAnimeDF)
View(MALAnimeDF)
mean(MALAnimeDF$votes)
View(IMDBAnimeDF)
mean(IMDBAnimeDF$rating)
mean(IMDBAnimeDF$rating %>% filter(rating != NA))
lib
library(dplyr)
mean(IMDBAnimeDF$rating %>% filter(rating != NA))
mean(IMDBAnimeDF %>% select(rating) %>% filter(rating != NA))
mean(IMDBAnimeDF %>% select(rating) %>% filter(rating != 'NA'))
mean(IMDBAnimeDF %>% select(rating) %>% filter(rating != ))
mean(IMDBAnimeDF %>% select(rating) %>% filter(rating != NA))
View(refineDF)
View(refineDF)
mean(IMDBAnimeDF %>% select(rating) %>% filter(!is.na(rating)))
IMDBAnimeDF %>% select(rating) %>% filter(!is.na(rating))
IMDBAnimeDF %>% filter(!is.na(rating))
IMDBAnimeDF %>% select(rating) %>% filter(!is.na(rating)) -> lisw2
mean(lisw2)
mean(lisw2$rating)
imdbpresentation <- getIMDBAnime()
View(getIMDBAnime)
getIMDBAnime <- function(){
library(rvest)
hasMore <- TRUE
allPageResults <- data.frame()
pageNo <- 22
while(hasMore == TRUE){
url <- paste("http://www.imdb.com/search/keyword?keywords=anime&sort=user_rating,desc&mode=detail&page=", pageNo, "&title_type=tvSeries&ref_=kw_ref_key", sep = "")
animePage <- read_html(url)
print(paste("Loading records",  (pageNo - 1) * 50, "to", (pageNo - 1) * 50  + 50))
pageResult <- data.frame()
titles <- animePage %>%
html_nodes("div.lister-item-content > h3 > a") %>%
html_text(trim = TRUE)
ratings <- animePage %>%
html_nodes("div.lister-item-content > div > div.inline-block.ratings-imdb-rating > strong") %>%
html_text(trim = TRUE)
ratings <- as.numeric(ratings)
votes <- animePage %>%
html_nodes("div.lister-item-content > p:nth-child(6) > span:nth-child(2)") %>%
html_text(trim = TRUE)
votes <- as.numeric(gsub(',', '', votes))
if(length(titles) != length(ratings)) {
length(ratings) <- max(length(titles))
length(votes) <- max(length(titles))
}
pageResult <- data.frame(titles, ratings, votes)
allPageResults <- rbind(allPageResults, pageResult)
if(nrow(pageResult) < 50) {
hasMore <- FALSE
} else {
pageNo <- pageNo + 1
}
}
names(allPageResults) <- c("title", "rating", "votes")
# write.csv(allPageResults, "imdb.csv")
data.frame(allPageResults)
}
imdbpresentation <- getIMDBAnime()
imdbpresentation
View(imdbpresentation)
View(getALAnime)
rm(list = top100RatingMean())
rm(list = top100RatingMean)
rm(top100RatingMean)
rm(top100VotesMean())
rm(top100VotesMean
)
rm(imdbpresentation)
View(getIMDBAnime)
View(getMALAnime)
View(refineDF)
rm(list = ls())
dir()
setwd("..")
dir()
setwd("repos")
dir()
setwd("trashhunters")
setwd("r")
file.edit("server.R")
shiny::runApp()
